/*
 * rxForm
 */

@import 'vars';
@import 'mixins';

/* Form Fields & Fieldsets */

// deprecated
.rx-form {
  margin: 15px 0 0;
}

// deprecated
.form-item {
  margin-top: 5px;
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: baseline;
}

// deprecated
.text-area-label {
  &.form-item {
    align-items: flex-start;
  }
}

// deprecated
.rx-form-fieldset > fieldset {
  width: 100%;
  .full-width .rx-option-table {
    width: 100%;
  }
}

// deprecated
.form-description,
.form-item {
  margin-bottom: 15px;
}

// deprecated
.field-label,
.field-legend {
  color: @inputLabelColor;
  font-size: 1.1em;
  flex: 0 0 @inputLabelWidth;
}

// deprecated
.field-content {
  display: flex;
  flex: 1 auto;
  flex-flow: row wrap;
  justify-content: flex-start;
  align-items: center;

  .field-prefix,
  .field-suffix {
    font-size: 1.2em;
  }
  .field-prefix {
    margin-right: 5px;
  }
  .field-suffix {
    margin-left: 5px;
  }

  .field-description {
    flex: 1 100%;
    font-size: 0.8em;
    font-style: italic;
    margin-top: 5px;
  }
}

/* Input fields */
// deprecated
.field-input {
  input,
  select {
    color: @inputColor;
    font-size: 1.2em;

    &.ng-invalid.ng-dirty {
      border-color: @inputBorderColorInvalid;
    }
  }

  input,
  .field-select {
    background: @white;
    max-width: 100%;
    box-sizing: border-box;
  }

  textarea {
    .inputBorderPadding;
    background-color: @white;
    width: 100%;
    position: relative;
    z-index: 2;
    box-sizing: border-box;
  }

  input {
    width: @inputWidth;
    .inputBorderPadding;

    &[type="number"] {
      width: @inputNumberWidth;
    }

    &[type="radio"],
    &[type="checkbox"] {
      width: auto;
      max-width: none;
      font-size: 1em;
      vertical-align: middle;
    }

    &[disabled] {
      color: @inputColorDisabled;
      background-color: @inputBackgroundDisabled;
      cursor: not-allowed;
    }
  }
}

/*
 * @bugfix Input field is marked as invalid before a user has done anything on form
 * @browsers FF
 * @see http://stackoverflow.com/questions/17209057/firefox-draws-red-border-on-required-select-box
 */
// NOTE: KEEP
.ng-pristine .field-input .ng-invalid-required {
  box-shadow: none;
}


/* Inline error messages */
// deprecated
.field-input-wrapper {
  .inline-error {
    color: #ff2400;
    font-weight: 900;
    margin-top: 5px;
  }
}

/* Dropdowns */
// deprecated
.field-select {
  display: inline-block;
  position: relative;
  width: @inputSelectWidth;

  select {
    width: 100%;
    margin: 0;
    .border-radius(0px);
    background: #fff;
    border: none;
    outline: none;
    display: inline-block;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    cursor: pointer;
    .inputBorderPadding;
  }

  &:before {
    // background so long text doesn't show behind caret
    content: '';
    right: 1px;
    top: 1px;
    width: 20px;
    height: 93%;
    background: #fff;
    position: absolute;
    pointer-events: none;
    display: block;
  }

  &:after {
    // down caret from font awesome
    content: '\f0d7';
    font-family: FontAwesome;
    font-size: 15px;
    color: #aaa;
    right: 10px;
    top: 7px;
    padding: 0;
    position: absolute;
    pointer-events: none;
  }
}

/* Submit buttons */

.form-actions {
  padding: 20px 0;
}

// DEPRECATED - UNUSED
.form-action {
  // override default button styles
  background: transparent;
  margin: 0;
  padding: 0;
  border: 0;
  cursor: pointer;
  font-size: 1.2em;

  &.submit {
    color: @actionGreen;
    margin-right: 1em;
    &:hover,
    &:focus {
      color: @actionGreenHover;
    }
    &[disabled] {
      color: @subduedText;
      cursor: not-allowed;
    }
  }
  &.cancel {
    color: @subduedText;
    &:hover,
    &:focus {
      color: @subduedTextHover;
    }
  }
}


/* Compressed Layout */
// DEPRECATED - No longer valid
.rx-form.layout-compressed {
  .rx-form-row {
    display: flex;
    flex-wrap: nowrap;
    flex: 1 auto;

    .form-item {
      padding: 0px 3px;
      flex: 1;
    }
  }

  .form-item {
    display: block;

    .field-input {
      width: 100%;
      display: block;

      select,
      textarea {
        width: 100%;
      }

      input {
        &:not([type="checkbox"]),
        &:not([type="radio"]) {
          width: 100%;
        }

        &[type="checkbox"],
        &[type="radio"] {
          width: 1em;
        }
      }
    }

    .field-label,
    .field-legend {
      font-size: 0.8em;
      display: block;
    }
  }

  // This is selecting based off of the element so that we can be sure to set
  // this if there is a prefix OR a suffix set. We can't assume they'll both
  // always be there.
  rx-form-item[suffix],
  rx-form-item[prefix] {
    .field-input {
      display: inline-block;
      width: auto;
    }
  }
}


/* NEW rxForm "2.0" STYLES  */
input,
textarea,
select {
  box-sizing: border-box;
  border: none;
  outline: none;
}

[rx-form],
rx-form-section,
rx-field,
rx-field-name,
rx-field-content,
rx-input,
rx-inline-error,
rx-help-text {
  box-sizing: border-box;
  display: block;
  margin: 0px;
  padding: 0px;
}

rx-inline-error {
  color: @rxForm-error-text-color;
  font-weight: 900;
}

rx-help-text {
  font-size: 0.8em;
  font-style: italic;
  margin: 1em 0em;
}

rx-field-name {
  color: @rxFieldName-color;
  font-size: @app-label-font-size;

  .wrapper {
    box-sizing: border-box;
    margin: 0px;
    padding: 0px;

    .required-symbol {
      font-weight: 900;
      color: @rxFieldName-symbol-color;
    }
  }
}//rx-field-name

[rx-form] {
  font-size: @rxForm-font-size;
  margin: @rxForm-gutter 0;

  rx-field-name,
  rx-help-text,
  rx-inline-error,
  rx-input {
    margin-bottom: (@rxForm-gutter / 2);

    &:last-child { margin-bottom: 0px; }
  }

  rx-form-section {
    // as flex container
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-start;

    margin: 0px (@rxForm-gutter / 2);

    & > div,
    rx-field {
      margin: 0px (@rxForm-gutter / 2) (@rxForm-gutter * 1.25);

      // http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg
      // as dynamic flex item (3rd arg acts like min-width)
      flex: 1 0 @rxForm-field-min-width;
    }

    rx-field {
      // as flex container
      display: flex;
      flex-flow: column nowrap;
      justify-content: flex-start;

      rx-field-content {
        flex: 1 0 auto; // as flex item
        margin-bottom: @rxForm-gutter;

        &:last-child {
          margin-bottom: 0px;
        }

        .validInput() {
          padding: 3px 5px;
          border: 1px solid @rxForm-input-border-color;
        }//.validInput()

        .invalidInput() {
          border: 2px solid @rxForm-input-border-color-invalid;
          // MUST differ with valid padding by 1px to
          // account for thicker border
          padding: 2px 4px;
        }//.invalidInput()

        .disabledInput() {
          border: 1px solid @rxForm-input-border-color;
          color: @app-disabled-text-color;
          background: @app-disabled-background-color;
          cursor: not-allowed !important;
        }//.disabledInput()

        rx-input {
          // as a flex container
          display: flex;
          flex-flow: row nowrap;
          justify-content: flex-start;
          align-items: stretch;

         .button {
            margin-bottom: 0px;
          }

          & > input,
          & > textarea {
            flex: 1 1 auto; // as dynamic flex item

            min-height: @rxForm-input-min-height;

            &, &.ng-valid {
              .validInput();
            }

            &.ng-invalid.ng-dirty {
              .invalidInput();

              // DISABLED STYLING
              // (these should trump all other styles)
              &[disabled] {
                .disabledInput();
              }
            }

            // DISABLED STYLING
            // (these should trump all other styles)
            &[disabled] {
              .disabledInput();
            }
          }

          rx-prefix,
          rx-suffix {
            box-sizing: border-box;
            min-height: @rxForm-input-min-height;
            padding: 0px (@rxForm-gutter / 4);
            flex: 0 0 auto; // as static flex item

            // as flex container
            display: flex;
            align-items: center; // content is vertically centered
          }

          rx-prefix:first-child {
            padding-left: 0px;
          }
          rx-suffix:last-child {
            padding-right: 0px;
          }

          /* ===== Other Directive Support ===== */
          .rxSelect {
            flex: 1 1 auto; // as dynamic flex item
          }

          rx-date-picker {
            flex: 0 0 auto; // as static flex item
          }

          .rxCheckbox,
          .rxRadio,
          rx-toggle-switch {
            flex: 0 0 auto; // as static flex item

            & + label {
              margin-left: 5px;
            }
          }

          .rxCheckbox,
          .rxRadio,
          rx-toggle-switch {
            &[disabled] + label {
              color: @app-disabled-text-color;
            }
          }

          .rx-option-table {
            table-layout: fixed;
            width: 100%;
          }

          // rxCharacterCount support
          .counted-input-wrapper {
            flex: 1 0;

            input,
            textarea {
              width: 100%;

              .validInput();

              &.ng-invalid.ng-dirty {
                .invalidInput();

                // DISABLED STYLING
                // (these should trump all other styles)
                &[disabled] {
                  .disabledInput();
                }
              }

              // DISABLED STYLING
              // (these should trump all other styles)
              &[disabled] {
                .disabledInput();
              }
            }
          }

          rx-search-box {
            flex: 1 1;
          }
        }//rx-input
      }//rx-field-content
    }//rx-field

    // replaces .form-actions
    // [rx-form] > rx-form-section > div
    & > div {
      margin-top: (@rxForm-gutter / 2);

      .button {
        margin: 2px;

        &:first-of-type {
          margin-left: 0px;
        }
        &:last-of-type {
          margin-right: 0px;
        }
      }
    }

    &[stacked] {
      flex-flow: column nowrap;

      & > div,
      rx-field {
        flex: 1 0; // grows vertically, does not shrink
        max-width: @rxForm-field-max-width;
        margin-bottom: (@rxForm-gutter * 1.25);
      }
    }

    &[controlled-width] {
      & > div,
      rx-field {
        max-width: @rxForm-field-max-width;
      }
    }
  }//rx-form-section
}//[rx-form]
